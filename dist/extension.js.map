{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,uGCnBf,eAEA,IAAIQ,EAIJ,oBAAyBC,GAGrBC,QAAQC,IAAI,oEAKZ,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,8BAA8B,KAG3EF,EAAOG,OAAOC,uBAAuB,wCAGzCR,EAAQS,cAAcC,KAAKP,GAE3B,MAAMQ,EAAc,qCACpB,IAAIC,EAAcR,EAAOC,SAASC,gBAAgBK,GAAa,KAG3DP,EAAOG,OAAOC,uBACV,+FAGRR,EAAQS,cAAcC,KAAKE,GAE3Bb,EAAkBK,EAAOG,OAAOM,oBAAoBT,EAAOU,mBAAmBC,KAAM,KACpFhB,EAAgBiB,QAAUL,EAC1BX,EAAQS,cAAcC,KAAKX,GAqB3BA,EAAgBkB,KAAO,sDAEvBlB,EAAgBmB,QAIpB,2B","sources":["webpack://atoll-extension/external commonjs \"vscode\"","webpack://atoll-extension/webpack/bootstrap","webpack://atoll-extension/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\n\nlet myStatusBarItem: vscode.StatusBarItem;\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n    // Use the console to output diagnostic information (console.log) and errors (console.error)\n    // This line of code will only be executed once when your extension is activated\n    console.log('Congratulations, your extension \"atoll-extension\" is now active!');\n\n    // The command has been defined in the package.json file\n    // Now provide the implementation of the command with registerCommand\n    // The commandId parameter must match the command field in package.json\n    let disposable = vscode.commands.registerCommand(\"atoll-extension.helloWorld\", () => {\n        // The code you place here will be executed every time your command is executed\n        // Display a message box to the user\n        vscode.window.showInformationMessage(\"Hello World from Atoll Extension!\");\n    });\n\n    context.subscriptions.push(disposable);\n\n    const myCommandId = \"atoll-extension.showSelectionCount\";\n    let disposable2 = vscode.commands.registerCommand(myCommandId, () => {\n        // const n = getNumberOfSelectedLines(vscode.window.activeTextEditor);\n        // vscode.window.showInformationMessage(`Yeah, ${n} line(s) selected... Keep going!`);\n        vscode.window.showInformationMessage(\n            \"gh-401: As a developer, I can use Atoll within VS Code, so that I can be more productive\"\n        );\n    });\n    context.subscriptions.push(disposable2);\n\n    myStatusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 10000);\n    myStatusBarItem.command = myCommandId;\n    context.subscriptions.push(myStatusBarItem);\n\n    // register some listener that make sure the status bar\n    // item always up-to-date\n    // context.subscriptions.push(vscode.window.onDidChangeActiveTextEditor(updateStatusBarItem));\n    // context.subscriptions.push(vscode.window.onDidChangeTextEditorSelection(updateStatusBarItem));\n\n    // update status bar item once at start\n    updateStatusBarItem();\n}\n\nfunction getNumberOfSelectedLines(editor: vscode.TextEditor | undefined): number {\n    let lines = 0;\n    if (editor) {\n        lines = editor.selections.reduce((prev, curr) => prev + (curr.end.line - curr.start.line), 0);\n    }\n    return lines;\n}\n\nfunction updateStatusBarItem(): void {\n    // https://code.visualstudio.com/api/references/icons-in-labels\n    myStatusBarItem.text = `$(extensions-star-full) gh-401 Â» basic extension UI`;\n\n    myStatusBarItem.show();\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","myStatusBarItem","context","console","log","disposable","vscode","commands","registerCommand","window","showInformationMessage","subscriptions","push","myCommandId","disposable2","createStatusBarItem","StatusBarAlignment","Left","command","text","show"],"sourceRoot":""}